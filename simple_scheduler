import schedule
import time
import requests 
import json
import xmltodict
#REGEX LIBRARY
import re
from ast import literal_eval

#Variable global
global newsBotKey
newsBotKey = ""
global newsBotCookie
newsBotCookie = ""
#API_ENDPOINT_TO_POST = "http://localhost:8080/api/news/"
#API_ENDPOINT_TO_POST = "https://satelite-noticias.herokuapp.com/api/news/"
API_ENDPOINT_TO_POST = "https://satelite-de-noticias.herokuapp.com/api/news/"

#API_ENDPOINT_TO_POST = "https://satelitenoticias.herokuapp.com/api/news/"

#API_ENDPOINT = "http://localhost:8080/api/rest-auth/registration/"
API_ENDPOINT = "https://satelite-de-noticias.herokuapp.com/api/rest-auth/registration/"
#API_ENDPOINT = "https://satelite-noticias.herokuapp.com/api/rest-auth/registration/"
API_ENDPOINT_LOGIN = "https://satelite-de-noticias.herokuapp.com/api/rest-auth/login/"

def substractStrings(str1,str2):
    result =  "".join(str1.rsplit(str2))
    return result

def regexTitle(title):
    axis = re.search(r"^[^:]*:", title)
    withoutAxis = substractStrings(title,axis.group())
    
    print("----------------------------------------------------------------------------------------------------------------------\n")
    print(withoutAxis)
    print("escribo aqui")
    print("----------------------------------------------------------------------------------------------------------------------\n")

    actualAxis = re.search(r".* -",withoutAxis)
    
    print("----------------------------------------------------------------------------------------------------------------------\n")
    print(actualAxis)
    print("----------------------------------------------------------------------------------------------------------------------\n")
    return actualAxis.group()

def job():
    print('Im working on it...')
    # Defining the api-endpoints  
    # Aqui estan las noticias que se descargan en formato xml
    # VIEJO ENDPOINT
    # https://dl.dropboxusercontent.com/s/neru9qom4pntr5z/feed_rss.xml?dl=0
    # NUEVO ENDPOINT
    #https://dl.dropboxusercontent.com/s/2ai5twyzkmmkfdn/feed_rss_general_Filtro2.xml?dl=0
    API_ENDPOINT_DATA = "https://dl.dropboxusercontent.com/s/2ai5twyzkmmkfdn/feed_rss_general_Filtro2.xml?dl=0"
    # Aqui esta el endpoint para postear las noticias  (Localmente)
    

    # data to be sent to api in satelite nnoticias
    #data = {"subject": "hola", "body": "un mensaje"}
    
    # sending post request and saving response as response object 
    r = requests.get(url = API_ENDPOINT_DATA) 
    #Transformar formato byte a string con codificacion utf-8
    rssContent = r.content.decode("utf-8") 
    parse_data = xmltodict.parse(rssContent)
    print("----------------------------------------")
    print(type(parse_data))
    print("----------------------------------------")

    unjson = json.dumps(parse_data, indent=4, sort_keys=True)
    d = json.loads(unjson)
    #print(d['rss']['channel']['item'])

    #Se tienen todas las noticias enlistadas en "data"
    realData =  d['rss']['channel']['item']


    unjson = json.loads(json.dumps(realData, indent=4, sort_keys=True))
    '''
    print("el json de todos los tiempos")
    print(unjson[0])
    print("Un pedacito")
    print(unjson[0]["title"])

    print(newsBotKey)
    '''
    #Aqui recien se tiene un ejemplo de noticia
    print('este es el kuky')
    print(newsBotCookie)
    #print(unjson)
    for news_single in unjson:
        print(news_single)
        source = news_single["category"][0]["#text"] 
        country = news_single["category"][1]["#text"]
        axis = news_single["category"][2]["#text"]
        date = news_single["pubDate"].replace(",","")
        print("----------------------------------------------------------------------------------------------------------------------\n")
        print(news_single["link"])
        print("----------------------------------------------------------------------------------------------------------------------\n")
        actualTitle = regexTitle(news_single["title"])
        print("----------------------------------------------------------------------------------------------------------------------\n")
        print(source)
        print(country)
        print(axis)
        print(date)
        print("----------------------------------------------------------------------------------------------------------------------\n")
        data = {"title": actualTitle,"content": news_single["description"],"fullContent":news_single["link"],"tags": "", "source": source, "country": country, "axis": axis, "date": date}
        #reply = requests.post(url = API_ENDPOINT_TO_POST, data = data, headers = {"Authorization": newsBotKey}) 
        reply = requests.post(url = API_ENDPOINT_TO_POST, data = data, headers = {"Authorization": newsBotKey}) 
        print(reply)



def createNewsBot():
    print('Im working on it...')
    
    data = {
            "username": "NewsBot",
            "email": "randomnames@gmail.com",
            "password1":"changeme123",
            "password2": "changeme123"
	
    }
    data2 = {
            "username": "NewsBot",
            "password":"changeme123"	
    }
    #reply = requests.post(url = API_ENDPOINT, data = data)
    reply = requests.post(url = API_ENDPOINT, data = data)  
    print('esto fue lo que me respondieron')
    print(reply.content)
    print(json.loads(json.dumps(literal_eval(reply.content.decode('utf8')), indent=4, sort_keys=True)). values() )  
    
    try:
        supposedStrKey = json.loads(json.dumps(literal_eval(reply.content.decode('utf8')), indent=4, sort_keys=True))["key"]
        print(supposedStrKey)
        print(reply.cookies.items()[0][1])
        supposedStrCookie = reply.cookies.items()[0][1]
        print('-'*20)
    except KeyError as e:
        print ('I got a KeyError')
        reply = requests.post(url = API_ENDPOINT_LOGIN, data = data2)  
        supposedStrKey = json.loads(json.dumps(literal_eval(reply.content.decode('utf8')), indent=4, sort_keys=True))["key"]
        print(supposedStrKey)
        print(reply.cookies.items()[0][1])
        supposedStrCookie = reply.cookies.items()[0][1]
        print('-'*20)

    return "Token "+ supposedStrKey, supposedStrCookie   

#Llamado a la funcion afuera del job
newsBotKey,newsBotCookie = createNewsBot()
schedule.every(6).hours.do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
